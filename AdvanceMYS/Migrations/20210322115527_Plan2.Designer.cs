// <auto-generated />
using System;
using AdvanceMYS.Models.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdvanceMYS.Migrations
{
    [DbContext(typeof(_Context))]
    [Migration("20210322115527_Plan2")]
    partial class Plan2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DomainClass.DomainClass.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Date")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("date");

                    b.Property<string>("Dsc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dsc");

                    b.Property<string>("Order")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int?>("RepeatCount")
                        .HasColumnType("int");

                    b.Property<int?>("RepeatedNumber")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("time");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Book", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Cat", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Dsc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CatId");

                    b.ToTable("Cat", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Category", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ContentTbl", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("order")
                        .IsFixedLength(true);

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.HasIndex("TitleId");

                    b.ToTable("ContentTbl", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.DaysExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DateExercise")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("SuccOrUnSucc")
                        .HasColumnType("bit")
                        .HasColumnName("Succ_OR_UnSucc");

                    b.Property<int?>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("DaysExercise", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.DicTbl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDateM")
                        .HasColumnType("date");

                    b.Property<string>("DateRefresh")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("date_refresh");

                    b.Property<DateTime?>("DateRefreshM")
                        .HasColumnType("date");

                    b.Property<string>("DateS")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("date_s");

                    b.Property<string>("Eng")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("eng");

                    b.Property<int?>("IdMonth")
                        .HasColumnType("int")
                        .HasColumnName("id_month");

                    b.Property<bool?>("IsArchieve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("LastIsTrueFalse")
                        .HasColumnType("bit");

                    b.Property<bool?>("LastStatus")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("Per")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("per");

                    b.Property<string>("Phonetic")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("SuccessCount")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("time");

                    b.Property<int?>("Timeword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("timeword")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("UnSuccessCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Eng", "UserId" }, "IX_dic_tbl")
                        .IsUnique();

                    b.HasIndex(new[] { "Level" }, "IX_dic_tbl_1");

                    b.ToTable("dic_tbl", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ExampleTbl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("example");

                    b.Property<int>("GetFromExample")
                        .HasColumnType("int");

                    b.Property<int>("IdDicTbl")
                        .HasColumnType("int")
                        .HasColumnName("id_dic_tbl");

                    b.HasKey("Id");

                    b.HasIndex("IdDicTbl");

                    b.ToTable("example_tbl", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Iodayly", b =>
                {
                    b.Property<int>("Ioid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IOId")
                        .UseIdentityColumn();

                    b.Property<string>("DayDate")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("Etime")
                        .HasColumnType("int")
                        .HasColumnName("ETime");

                    b.Property<int?>("Iotype")
                        .HasColumnType("int")
                        .HasColumnName("IOType");

                    b.Property<int?>("Stime")
                        .HasColumnType("int")
                        .HasColumnName("STime");

                    b.HasKey("Ioid");

                    b.HasIndex(new[] { "DayDate", "Iotype" }, "IX_IODayly")
                        .IsUnique()
                        .HasFilter("[IOType] IS NOT NULL");

                    b.ToTable("IODayly", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("GridShow")
                        .HasColumnType("bit");

                    b.Property<bool>("Mohasebe")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Job", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.KarKard", b =>
                {
                    b.Property<int>("KarkardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DayDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MiladyDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SpendTimeMinute")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("KarkardId");

                    b.HasIndex("JobId");

                    b.ToTable("KarKard", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.LogTbl", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Date")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("date");

                    b.Property<string>("Dsc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("dsc");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Time")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LogId");

                    b.ToTable("LogTBL", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ManageTime", b =>
                {
                    b.Property<int>("ManageTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("ManageTimeId");

                    b.ToTable("ManageTime", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.MasterDatum", b =>
                {
                    b.Property<int>("MasterDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PersonelName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Personelid")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("WeightDate")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("MasterDataId")
                        .HasName("PK_Weight");

                    b.ToTable("MasterDatum", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Controller")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsCascade")
                        .HasColumnType("bit");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MenuId");

                    b.ToTable("Menu", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Menuha", b =>
                {
                    b.Property<int>("MenuhaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MenuhaId");

                    b.ToTable("Menuha", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.MvchomeHeaderThree", b =>
                {
                    b.Property<int>("MvchomeHeaderThreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MVCHomeHeaderThreeId")
                        .UseIdentityColumn();

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MvchomeHeaderThreeId");

                    b.ToTable("MVCHomeHeaderThree", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Namad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CodeSherkat")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Namad1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Namad");

                    b.Property<string>("NamadSahih")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RahavardId")
                        .HasColumnType("int");

                    b.Property<string>("TseAdrs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("tseAdrs");

                    b.Property<string>("TseId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("tseId");

                    b.HasKey("Id");

                    b.ToTable("Namad", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.NamadDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double?>("DarsadGheymatPayany")
                        .HasColumnType("float");

                    b.Property<long?>("GheymatPayany")
                        .HasColumnType("bigint");

                    b.Property<long?>("Hajm")
                        .HasColumnType("bigint");

                    b.Property<int?>("NamadId")
                        .HasColumnType("int");

                    b.Property<string>("ShamsyDate")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<long?>("TedadMoamelat")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NamadId");

                    b.ToTable("NamadDetail", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("DateRefresh")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Note", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.PercentJob", b =>
                {
                    b.Property<int>("PercentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("PercentValue")
                        .HasColumnType("int");

                    b.HasKey("PercentId");

                    b.HasIndex("JobId");

                    b.ToTable("PercentJob", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Planing", b =>
                {
                    b.Property<int>("PlaningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaningId");

                    b.ToTable("Planing");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Player", b =>
                {
                    b.Property<int>("PlayersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHozoor")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("PlayersId");

                    b.ToTable("Player", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.PlayerScore", b =>
                {
                    b.Property<int>("PlayerScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlayerScoreId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerScore", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.RoutineJob", b =>
                {
                    b.Property<int>("RoutineJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("RoozDaily")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoutineJobId");

                    b.HasIndex("UserId");

                    b.ToTable("RoutineJob", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.RoutineJobHa", b =>
                {
                    b.Property<int>("RoutineJobHa1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoutineJobHa")
                        .UseIdentityColumn();

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsCheck")
                        .HasColumnType("bit");

                    b.Property<int>("RoutineJobId")
                        .HasColumnType("int");

                    b.HasKey("RoutineJobHa1");

                    b.HasIndex("RoutineJobId");

                    b.HasIndex(new[] { "Date", "RoutineJobId" }, "IX_RoutineJobHa")
                        .IsUnique();

                    b.ToTable("RoutineJobHa", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SettingId");

                    b.ToTable("Setting", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ShowLastPercantageJob", b =>
                {
                    b.Property<int?>("Jobid")
                        .HasColumnType("int")
                        .HasColumnName("jobid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Percentvalue")
                        .HasColumnType("int")
                        .HasColumnName("percentvalue");

                    b.ToView("ShowLastPercantageJob");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ShowSumLastPercantage", b =>
                {
                    b.Property<int?>("Percantage")
                        .HasColumnType("int");

                    b.ToView("ShowSumLastPercantage");
                });

            modelBuilder.Entity("DomainClass.DomainClass.SliderPhoto", b =>
                {
                    b.Property<int>("SliderPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Header")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Matn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PhotoImg")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("SliderPhotoId");

                    b.ToTable("SliderPhoto", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Set")
                        .HasColumnType("int");

                    b.Property<int>("Tedad")
                        .HasColumnType("int");

                    b.HasKey("SportId");

                    b.HasIndex("CatId");

                    b.ToTable("Sport", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("JobId");

                    b.ToTable("Subject", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Taghvim", b =>
                {
                    b.Property<int>("TaghvimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dsc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHolyDay")
                        .HasColumnType("bit");

                    b.HasKey("TaghvimId");

                    b.ToTable("Taghvim", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<int?>("DarsadPishraft")
                        .HasColumnType("int");

                    b.Property<string>("DateEnd")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("DateStart")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCheck")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Olaviat")
                        .HasColumnType("int");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("CatId");

                    b.HasIndex("UserId");

                    b.ToTable("Task", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.TaskImage", b =>
                {
                    b.Property<int>("TaskImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Img")
                        .HasColumnType("image")
                        .HasColumnName("img");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("TaskImageId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskImage", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Timing", b =>
                {
                    b.Property<int>("TimingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ManageTimeId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("TimingId");

                    b.HasIndex("ManageTimeId");

                    b.HasIndex("TaskId");

                    b.ToTable("Timing", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.TitleTbl", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Order")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("order")
                        .IsFixedLength(true);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TitleId");

                    b.HasIndex("BookId");

                    b.ToTable("TitleTbl", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "UserName" }, "IX_Users")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_Users_1")
                        .IsUnique();

                    b.ToTable("User", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", "5069_Esmaeili");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Book", b =>
                {
                    b.HasOne("DomainClass.DomainClass.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Book_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Category", b =>
                {
                    b.HasOne("DomainClass.DomainClass.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Category_Users")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ContentTbl", b =>
                {
                    b.HasOne("DomainClass.DomainClass.TitleTbl", "Title")
                        .WithMany("ContentTbls")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_ContentTbl_TitleTbl");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DomainClass.DomainClass.DaysExercise", b =>
                {
                    b.HasOne("DomainClass.DomainClass.DicTbl", "Word")
                        .WithMany("DaysExercises")
                        .HasForeignKey("WordId")
                        .HasConstraintName("FK_DaysExercise_dic_tbl")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DomainClass.DomainClass.DicTbl", b =>
                {
                    b.HasOne("DomainClass.DomainClass.User", "User")
                        .WithMany("DicTbls")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dic_tbl_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ExampleTbl", b =>
                {
                    b.HasOne("DomainClass.DomainClass.DicTbl", "DicTbl")
                        .WithMany("ExampleTbls")
                        .HasForeignKey("IdDicTbl")
                        .HasConstraintName("FK_example_tbl_dic_tbl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DicTbl");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Job", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Job_Category")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DomainClass.DomainClass.KarKard", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Job", "Job")
                        .WithMany("KarKards")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_KarKard_Job")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");
                });

            modelBuilder.Entity("DomainClass.DomainClass.NamadDetail", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Namad", "Namad")
                        .WithMany("NamadDetails")
                        .HasForeignKey("NamadId")
                        .HasConstraintName("FK_NamadDetail_Namad")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Namad");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Note", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Subject", "Subject")
                        .WithMany("Note")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DomainClass.DomainClass.PercentJob", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Job", "Job")
                        .WithMany("PercentJobs")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_PercentJob_Job")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("DomainClass.DomainClass.PlayerScore", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Player", "Player")
                        .WithMany("PlayerScores")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_PlayerScore_Players")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainClass.DomainClass.User", "User")
                        .WithMany("PlayerScores")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PlayerScore_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainClass.DomainClass.RoutineJob", b =>
                {
                    b.HasOne("DomainClass.DomainClass.User", "User")
                        .WithMany("RoutineJobs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RoutineJob_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainClass.DomainClass.RoutineJobHa", b =>
                {
                    b.HasOne("DomainClass.DomainClass.RoutineJob", "RoutineJob")
                        .WithMany("RoutineJobHas")
                        .HasForeignKey("RoutineJobId")
                        .HasConstraintName("FK_RoutineJobHa_RoutineJob")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoutineJob");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Sport", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Cat", "Cat")
                        .WithMany("Sports")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_Sport_Cat")
                        .IsRequired();

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Subject", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Job", "Job")
                        .WithMany("Subjects")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Task", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Cat", "Cat")
                        .WithMany("Tasks")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_Task_Cat");

                    b.HasOne("DomainClass.DomainClass.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Task_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainClass.DomainClass.TaskImage", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Task", "Task")
                        .WithMany("TaskImages")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskImage_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Timing", b =>
                {
                    b.HasOne("DomainClass.DomainClass.ManageTime", "ManageTime")
                        .WithMany("Timings")
                        .HasForeignKey("ManageTimeId")
                        .HasConstraintName("FK_Timing_ManageTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainClass.DomainClass.Task", "Task")
                        .WithMany("Timings")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_Timing_Task")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManageTime");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DomainClass.DomainClass.TitleTbl", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Book", "Book")
                        .WithMany("TitleTbls")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_TitleTbl_Book");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DomainClass.DomainClass.UserRole", b =>
                {
                    b.HasOne("DomainClass.DomainClass.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainClass.DomainClass.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Book", b =>
                {
                    b.Navigation("TitleTbls");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Cat", b =>
                {
                    b.Navigation("Sports");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("DomainClass.DomainClass.DicTbl", b =>
                {
                    b.Navigation("DaysExercises");

                    b.Navigation("ExampleTbls");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Job", b =>
                {
                    b.Navigation("KarKards");

                    b.Navigation("PercentJobs");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("DomainClass.DomainClass.ManageTime", b =>
                {
                    b.Navigation("Timings");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Namad", b =>
                {
                    b.Navigation("NamadDetails");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Player", b =>
                {
                    b.Navigation("PlayerScores");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DomainClass.DomainClass.RoutineJob", b =>
                {
                    b.Navigation("RoutineJobHas");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Subject", b =>
                {
                    b.Navigation("Note");
                });

            modelBuilder.Entity("DomainClass.DomainClass.Task", b =>
                {
                    b.Navigation("TaskImages");

                    b.Navigation("Timings");
                });

            modelBuilder.Entity("DomainClass.DomainClass.TitleTbl", b =>
                {
                    b.Navigation("ContentTbls");
                });

            modelBuilder.Entity("DomainClass.DomainClass.User", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Categories");

                    b.Navigation("DicTbls");

                    b.Navigation("PlayerScores");

                    b.Navigation("RoutineJobs");

                    b.Navigation("Tasks");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
